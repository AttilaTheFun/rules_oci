load("@aspect_bazel_lib//lib:jq.bzl", "jq")
load("//oci:defs.bzl", "oci_image", "oci_image_index", "oci_push")
load(":stamp_tags.bzl", "stamp_tags")

oci_image(
    name = "image",
    architecture = "amd64",
    entrypoint = ["/fail"],
    os = "linux",
)

oci_push(
    name = "push_image",
    image = ":image",
    repository = "index.docker.io/<ORG>/image",
    repotags = ["latest"],
)

oci_push(
    name = "push_image_wo_tags",
    image = ":image",
    repository = "index.docker.io/<ORG>/image",
)

oci_image_index(
    name = "image_index",
    images = [
        ":image",
    ],
)

# Take advantage of jq stamping ability to create a simple text file.
jq(
    name = "stamped_repo",
    srcs = [],
    out = "repository.txt",
    args = ["--raw-output"],
    # With --stamp, insert the current username, otherwise use "nobody"
    filter = """\
    $ARGS.named.STAMP as $stamp | (
        "index.docker.io/" + ($stamp.BUILD_USER // "nobody") + "/my-image"
    )
    """,
)

stamp_tags(
    name = "stamped_tags",
    repotags = [
        # With --stamp, use the --embed_label value, otherwise use "0.0.0"
        """($stamp.BUILD_EMBED_LABEL // "0.0.0")""",
        "nightly",
    ],
)

oci_push(
    name = "push_image_index",
    image = ":image_index",
    repository_file = ":stamped_repo",
    repotags = ":stamped_tags",
)

sh_test(
    name = "test",
    srcs = ["test.bash"],
    args = [
        "$(CRANE_BIN)",
        "$(LAUNCHER_WRAPPER)",
        "$(location :push_image)",
        "$(location :push_image_index)",
        "$(location :push_image_wo_tags)",
    ],
    data = [
        ":push_image",
        ":push_image_index",
        ":push_image_wo_tags",
        "@oci_crane_toolchains//:current_toolchain",
        "@oci_zot_toolchains//:current_toolchain",
    ],
    toolchains = [
        "@oci_crane_toolchains//:current_toolchain",
        "@oci_zot_toolchains//:current_toolchain",
    ],
)
