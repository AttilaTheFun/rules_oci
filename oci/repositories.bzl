"""Repository rules for fetching external tools"""
load("//oci/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//oci/private:versions.bzl", "CRANE_VERSIONS")


CRANE_BUILD_TMPL = """\
# Generated by container/repositories.bzl
load("@aspect_rules_oci//oci:toolchain.bzl", "crane_toolchain")
crane_toolchain(
    name = "crane_toolchain", 
    crane = select({
        "@bazel_tools//src/conditions:host_windows": "crane.exe",
        "//conditions:default": "crane",
    }),
)
"""

def _crane_repo_impl(repository_ctx):
    url = "https://github.com/google/go-containerregistry/releases/download/{version}/go-containerregistry_{platform}.tar.gz".format(
        version = repository_ctx.attr.crane_version,
        platform = repository_ctx.attr.platform[:1].upper() + repository_ctx.attr.platform[1:],
    )
    repository_ctx.download_and_extract(
        url = url,
        integrity = CRANE_VERSIONS[repository_ctx.attr.crane_version][repository_ctx.attr.platform],
    )
    repository_ctx.file("BUILD.bazel", CRANE_BUILD_TMPL)

crane_repositories = repository_rule(
    _crane_repo_impl,
    doc = "Fetch external tools needed for crane toolchain",
    attrs = {
        "crane_version": attr.string(mandatory = True, values = CRANE_VERSIONS.keys()),
        "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
    },
)

# Wrapper macro around everything above, this is the primary API
def oci_register_toolchains(name, crane_version):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "container_linux_amd64" -
      this repository is lazily fetched when node is needed for that platform.
    - create a repository exposing toolchains for each platform like "container_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "container7"
        crane_version: passed to each crane_repositories call
    """

    toolchain_name = "{name}_crane_toolchains".format(name = name)

    for platform in PLATFORMS.keys():
        crane_repositories(
            name = "{name}_crane_{platform}".format(name = name, platform = platform),
            platform = platform,
            crane_version = crane_version
        )
        native.register_toolchains("@%s//:%s_toolchain" % (toolchain_name, platform))

    toolchains_repo(
        name = toolchain_name,
        toolchain_type = "@aspect_rules_oci//oci:crane_toolchain_type",
        # avoiding use of .format since {platform} is formatted by toolchains_repo for each platform.
        toolchain = "@%s_crane_{platform}//:crane_toolchain" % name
    )
